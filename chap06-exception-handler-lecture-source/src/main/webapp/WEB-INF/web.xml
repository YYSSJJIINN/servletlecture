<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         version="6.0">

    <!--
        Note.
         에러 처리(exception handling)은 전통적으로 web.xml 파일을 통해 설정하는 것이 일반적이다.
         물론 서블릿 3.0 이후 도입된 어노테이션 방식으로도 에러 처리 로직을 구현할 수 있지만,
         우리가 지금까지 사용해온 @WebServlet 어노테이션은 해당 영역이 아니다.
         서블릿 필터 개념이 적용된 @WebFilter를 배워야 구현 가능하기 때문에 여기선 web.xml 파일로 설정해본다.
    -->
    <!--
        Note. 에러 처리 로직 호출 흐름
         1. 사용자: a태그의 /show404error 링크 클릭 → 서버로 요청 전송.
         2. Tomcat: 요청 처리 → Show404ErrorServlet의 doGet 메서드 실행 → 404 에러 발생.
         3. Tomcat: 404 에러 확인 → web.xml 문서에 정의된 ExceptionHandlerServlet으로 요청 전달.
         4. ExceptionHandlerServlet: 에러 정보 처리 → 동적 에러 페이지 생성 → 클라이언트에게 응답.
         5. 사용자: 브라우저에서 동적 에러 페이지 확인.
         여기서 핵심은 사용자가 whitelabel 에러 페이지를 구경할 수 없다는 점이다.
    -->

    <!-- 서블릿 컨테이너가 관리중인 서블릿에서 404 에러가 발생 했을 때, "/showMyErrorPage"와 매핑된 서블릿을 호출하겠다. -->
    <error-page>
        <error-code>404</error-code>
        <location>/showMyErrorPage</location>
    </error-page>
    <!-- 서블릿 컨테이너가 관리중인 서블릿에서 500 에러가 발생 했을 때, "/showMyErrorPage"와 매핑된 서블릿을 호출하겠다. -->
    <error-page>
        <error-code>500</error-code>
        <location>/showMyErrorPage</location>
    </error-page>
</web-app>